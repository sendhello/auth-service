version: '3.8'

services:

  auth:
    container_name: auth
    hostname: auth
    build: 
      context: .
      dockerfile: Dockerfile
    environment:
      DEBUG: ${DEBUG:-false}
      PROJECT_NAME: ${AUTH_PROJECT_NAME}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      SECRET_KEY: ${SECRET_KEY}
      JAEGER_TRACE: ${JAEGER_TRACE:-false}
      JAEGER_AGENT_HOST: ${JAEGER_AGENT_HOST:-jaeger}
      JAEGER_AGENT_PORT: ${JAEGER_AGENT_PORT:-6831}
      REQUEST_LIMIT_PER_MINUTE: ${REQUEST_LIMIT_PER_MINUTE:-60}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
    networks:
      - network
    expose:
      - "8000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres:16
    networks:
      - network
    expose:
      - "5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - pg_data:/var/lib/postgresql/data/
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    container_name: redis
    hostname: redis
    image: redis:7.4-alpine
    command: redis-server --appendonly yes
    environment:
      REDIS_DISABLE_COMMANDS: FLUSHDB,FLUSHALL,DEBUG
    volumes:
      - redis_data:/data
    expose:
      - "6379"
    networks:
      - network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  jaeger:
    container_name: jaeger
    hostname: jaeger
    image: jaegertracing/all-in-one:1.55
    environment:
      COLLECTOR_OTLP_ENABLED: true
      COLLECTOR_ZIPKIN_HOST_PORT: :9411
    ports:
      - "6831:6831/udp"
      - "16686:16686"
      - "14250:14250"  # gRPC
      - "14268:14268"  # HTTP
      - "9411:9411"    # Zipkin
    networks:
      - network
    restart: unless-stopped

  mailhog:
    container_name: mailhog
    hostname: mailhog
    image: mailhog/mailhog:v1.0.1
    expose:
      - "1025"
    ports:
      - "8025:8025"  # web ui
    networks:
      - network
    restart: unless-stopped

volumes:
  pg_data:
    driver: local
  redis_data:
    driver: local

networks:
  network:
    driver: bridge