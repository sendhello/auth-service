""" "add_orgs"

Revision ID: 9b67dfe8b6fb
Revises: 98922dad2d33
Create Date: 2025-07-26 18:42:22.416332

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

from db import postgres


# revision identifiers, used by Alembic.
revision = "9b67dfe8b6fb"
down_revision = "98922dad2d33"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "organizations",
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("slug", sa.String(length=255), nullable=False),
        sa.Column("plan", sa.Enum("FREE", "BASIC", "PREMIUM", "ULTIMATE", name="plan"), nullable=False),
        sa.Column("status", sa.Enum("PENDING", "ACTIVE", "INACTIVE", "BLOCKED", name="org_status"), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
        sa.UniqueConstraint("slug"),
    )

    op.create_table(
        "memberships",
        sa.Column("org_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column(
            "role", sa.Enum("OWNER", "ADMIN", "DISPATCHER", "COURIER", "VIEWER", name="membership_role"), nullable=False
        ),
        sa.Column("is_primary", sa.Boolean(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["org_id"],
            ["organizations.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
        sa.UniqueConstraint("org_id", "user_id", name="unique_org_user_membership"),
    )

    # Remove role_id column from users table (drop foreign key first)
    op.drop_constraint(op.f("users_role_id_fkey"), "users", type_="foreignkey")
    op.drop_column("users", "role_id")

    # Add status column to users table
    user_status_enum = postgresql.ENUM("ACTIVE", "INACTIVE", "BLOCKED", name="user_status")
    user_status_enum.create(op.get_bind(), checkfirst=True)
    op.add_column("users", sa.Column("status", user_status_enum, nullable=False))
    op.create_unique_constraint(None, "users", ["id"])

    # Drop table 'roles'
    op.drop_table("roles")

    # Enable Row Level Security on new tables
    op.execute("ALTER TABLE organizations ENABLE ROW LEVEL SECURITY")

    # Create RLS policies for organizations
    op.execute(
        """
        CREATE POLICY org_isolation_organizations ON organizations
        USING (id = current_setting('app.org_id', true)::uuid)
    """
    )

    # Create indexes for better performance
    op.create_index("idx_memberships_user_id", "memberships", ["user_id"])
    op.create_index("idx_organizations_slug", "organizations", ["slug"])
    op.create_index("idx_organizations_status", "organizations", ["status"])

    op.create_unique_constraint(None, "history", ["id"])
    op.create_unique_constraint(None, "socials", ["id"])

    # ### end Alembic commands ###


def downgrade() -> None:
    # Drop indexes
    op.drop_index("idx_organizations_status")
    op.drop_index("idx_organizations_slug")
    op.drop_index("idx_memberships_user_id")

    # Drop RLS policies
    op.execute("DROP POLICY IF EXISTS org_isolation_organizations ON organizations")

    # Disable RLS
    op.execute("ALTER TABLE organizations DISABLE ROW LEVEL SECURITY")

    # Add back role_id column to users table
    op.add_column("users", sa.Column("role_id", sa.UUID(), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f("users_role_id_fkey"), "users", "roles", ["role_id"], ["id"])

    op.drop_constraint(None, "users", type_="unique")
    op.drop_column("users", "status")
    user_status_enum = postgresql.ENUM("ACTIVE", "INACTIVE", "BLOCKED", name="user_status")
    user_status_enum.drop(op.get_bind(), checkfirst=True)

    op.drop_constraint(None, "socials", type_="unique")
    op.drop_constraint(None, "history", type_="unique")

    # Recreate the roles table
    op.create_table(
        "roles",
        sa.Column("title", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("rules", postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("roles_pkey")),
        sa.UniqueConstraint(
            "title", name=op.f("roles_title_key"), postgresql_include=[], postgresql_nulls_not_distinct=False
        ),
    )

    # Drop new tables
    op.drop_table("memberships")
    op.drop_table("organizations")

    # ### end Alembic commands ###
